# -*- coding: utf-8 -*-
"""task3prasunt.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oigfgRBHmYNlzhPh4NCvb9YO7VeS9wZJ
"""

# Importing necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import LabelEncoder
from io import BytesIO
from zipfile import ZipFile
import requests

# URL of the dataset
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/00222/bank-additional.zip"

# Fetching the ZIP file from the URL
response = requests.get(url)

# Extracting the contents of the ZIP file in memory
with ZipFile(BytesIO(response.content)) as z:
    # Assuming the CSV file is named 'bank-additional-full.csv' inside the ZIP
    with z.open('bank-additional/bank-additional-full.csv') as f:
        df = pd.read_csv(f, sep=';')

# Displaying the first few rows of the dataset
print("Sample of the dataset:")
print(df.head())

# Checking for any missing values
print("\nMissing values:")
print(df.isnull().sum())

# Encoding categorical variables
le = LabelEncoder()
df['y'] = le.fit_transform(df['y'])  # Converting target variable to numeric

# Selecting features and target variable
X = df.drop('y', axis=1)
y = df['y']

# One-hot encoding categorical variables
X = pd.get_dummies(X)

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initializing the Decision Tree Classifier
dt_classifier = DecisionTreeClassifier(random_state=42)

# Training the classifier
dt_classifier.fit(X_train, y_train)

# Making predictions
y_pred = dt_classifier.predict(X_test)

# Evaluating the model
accuracy = accuracy_score(y_test, y_pred)
print("\nAccuracy:", accuracy)

# Displaying classification report
print("\nClassification Report:")
print(classification_report(y_test, y_pred))