# -*- coding: utf-8 -*-
"""task4prasunt.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QIE31DaMFzUpsdY-0ddomFxwKCtyC-Ju
"""

import pandas as pd
import csv
import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer
import matplotlib.pyplot as plt
import seaborn as sns

# Step 1: Specify file path and optional parameters
file_path = 'D:\\Downloads\\twitter_training.csv'  # Adjust the path according to your file location
encoding = 'utf-8'  # Specify the encoding of your CSV file

# Step 2: Read CSV file into Pandas DataFrame with error handling
try:
    df = pd.read_csv("/content/twitter_training.csv")
except pd.errors.ParserError as e:
    print(f"ParserError: {e}")
    print("Attempting to read with csv module for manual parsing...")

    # Option 2: Using csv module for manual parsing
    data = []
    with open(file_path, 'r', encoding=encoding, errors='replace') as csvfile:
        csvreader = csv.reader(csvfile)
        for row in csvreader:
            data.append(row)

    df = pd.DataFrame(data[1:], columns=data[0])  # Assuming the first row is header

# Step 3: Display first few rows to verify
print(df.head())

# Step 4: Perform additional data analysis or visualization
# Check if 'text' column exists in df
if 'text' in df.columns:
    # Import NLTK VADER lexicon if not already downloaded
    nltk.download('vader_lexicon')

    # Initialize VADER sentiment analyzer
    sid = SentimentIntensityAnalyzer()

    # Compute sentiment scores
    df['sentiment_compound'] = df['text'].apply(lambda x: sid.polarity_scores(x)['compound'])

    # Categorize sentiment labels
    df['sentiment_label'] = df['sentiment_compound'].apply(lambda x: 'positive' if x >= 0.05 else ('negative' if x <= -0.05 else 'neutral'))

    # Plot sentiment distribution
    plt.figure(figsize=(8, 6))
    sns.countplot(x='sentiment_label', data=df, palette='viridis')
    plt.title('Sentiment Distribution')
    plt.xlabel('Sentiment')
    plt.ylabel('Count')
    plt.show()

    # Plot sentiment over time (if your dataset has timestamps)
    # Replace 'timestamp' with your actual timestamp column name
    if 'timestamp' in df.columns:
        plt.figure(figsize=(12, 8))
        sns.lineplot(x='timestamp', y='sentiment_compound', data=df, estimator=None, lw=1)
        plt.title('Sentiment Over Time')
        plt.xlabel('Timestamp')
        plt.ylabel('Compound Sentiment Score')
        plt.xticks(rotation=45)
        plt.show()
    else:
        print("No timestamp column found in the dataset. Skipping time series plot.")
else:
    print("Column 'text' not found in the dataset. Please check your CSV file and column names.")